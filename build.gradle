plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    alias( libs.plugins.enonic.defaults )
    alias( libs.plugins.enonic.xp.base )
    alias( libs.plugins.node.gradle )
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

dependencies {
  compileOnly "com.enonic.xp:core-api:${xpVersion}"
  compileOnly "com.enonic.xp:portal-api:${xpVersion}"
  compileOnly "com.enonic.xp:script-api:${xpVersion}"
  compileOnly "com.enonic.xp:admin-api:${xpVersion}"

  implementation libs.lib.router

  testImplementation platform( libs.mockito.core )
  testImplementation libs.junit.jupiter
  testImplementation libs.mockito.jupiter
  testRuntimeOnly libs.junit.launcher
  testImplementation "com.enonic.xp:testing:${xpVersion}"
  testImplementation "com.enonic.xp:admin-api:${xpVersion}"
}

processResources {
  exclude '**/.gitkeep'
  exclude '**/*.ts'
  exclude '**/tsconfig.json'
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo('dev')
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }
}

test {
  useJUnitPlatform()
}

node {
  // Whether to download and install a specific Node.js version or not
  // If false, it will use the globally installed Node.js
  // If true, it will download node using above parameters
  // Note that npm is bundled with Node.js
  download = true

  // Version of node to download and install (only used if download is true)
  // It will be unpacked in the workDir
  version = '20.14.0'
}

tasks.withType( Copy ).configureEach {
  includeEmptyDirs = false
}

tasks.register('npmBuild', NpmTask) {
  args = [
    'run',
    '--silent',
    'build'
  ]
  dependsOn npmInstall
  dependsOn 'javadoc'
  environment = [
    'FORCE_COLOR': 'true',
    'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
    'NODE_ENV': project.hasProperty('dev') || project.hasProperty('development') ? 'development' : 'production'
  ]
  inputs.dir 'src/main/resources'
  outputs.dir 'build/resources/main'
}

tasks.register('npmCheck', NpmTask) {
	dependsOn npmInstall
	args = [
		'run',
		'check'
	]
	environment = [
		'FORCE_COLOR': 'true',
	]
}

tasks.register('npmTest', NpmTask) {
	args = [
		'run',
		'test'
	]
	dependsOn npmInstall
	environment = [
		'FORCE_COLOR': 'true',
	]
  inputs.dir 'src/bun'
  outputs.dir 'coverage'
}

tasks.register('publishToNpm', NpmTask ) {
  onlyIf { !version.endsWith( '-SNAPSHOT' ) }
  args = ['publish']
  dependsOn npmBuild
  workingDir = file('build/types')
}

jar.dependsOn npmBuild
compileTestJava.dependsOn npmBuild
test.dependsOn npmTest
check.dependsOn npmCheck, jacocoTestReport
publish.dependsOn publishToNpm
