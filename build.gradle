plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.5'
    id 'com.enonic.xp.base' version '3.5.0'
    id 'org.asciidoctor.jvm.convert' version '4.0.3'
    id "org.aim42.htmlSanityCheck" version '1.1.6'
    id 'com.github.jlouns.cpe' version '0.5.0' // CrossPlatformExec
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

sourceCompatibility = JavaVersion.VERSION_11

dependencies {
   // compileOnly: This is used for dependencies that are only needed during
   // compilation. The library itself is not included in the final application
   // build.
  compileOnly "com.enonic.xp:core-api:${xpVersion}"
  compileOnly "com.enonic.xp:script-api:${xpVersion}"

  // implementation: This is the most common way to specify a dependency.
  // Libraries included with implementation are available during both compile
  // time and runtime. This means your code can use the functionality of the
  // dependency while compiling and when the final application runs.
  implementation "com.enonic.xp:lib-io:${xpVersion}"
  implementation "com.enonic.xp:lib-portal:${xpVersion}"
  // implementation "com.enonic.xp:lib-vhost:${xpVersion}"
  implementation 'com.enonic.lib:lib-router:3.1.0'

  // testImplementation "com.enonic.xp:testing:${xpVersion}"

  // testImplementation "org.mockito:mockito-inline:5.2.0"
}

processResources {
  exclude '**/.gitkeep'
  exclude '**/*.ts'
  exclude '**/tsconfig.json'
}

repositories {
    mavenCentral()
    xp.enonicRepo('dev')
}

tasks.withType(Copy) {
  includeEmptyDirs = false
}

tasks.register('bunInstall', CrossPlatformExec) {
	commandLine 'bunx', '--bun', 'bun', 'install'
	environment [
		'FORCE_COLOR': 'true',
	]
}

clean {
  delete 'coverage'
}

tasks.register('bunBuild', CrossPlatformExec) {
	commandLine 'bunx', '--bun', 'bun', 'run', 'build'
	environment [
		'FORCE_COLOR': 'true',
    'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
    // Next line causes: No map entry allowed at this place (with wrong line number)
    // 'NODE_ENV': project.hasProperty('dev') || project.hasProperty('development') ? 'development' : 'production'
    'NODE_ENV': 'production',
	]
	dependsOn bunInstall
  dependsOn javadoc
	inputs.dir 'src/main/resources'
  outputs.dir 'build/resources/main'
}

jar.dependsOn bunBuild

asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')

    attributes 'source-highlighter': 'coderay'

    resources {
        from(sourceDir) {
            include '**/images/**'
            include '**/media/**'
        }
    }
}

htmlSanityCheck {
    dependsOn asciidoctor

    sourceDir = tasks.asciidoctor.outputDir
}

tasks.register('bunCheck', CrossPlatformExec) {
	commandLine 'bunx', '--bun', 'bun', 'check'
	environment [
		'FORCE_COLOR': 'true',
	]
	dependsOn bunInstall
	inputs.dir 'src/main/resources'
}

check.dependsOn bunCheck

tasks.register('bunTest', CrossPlatformExec) {
	commandLine 'bunx', '--bun', 'bun', 'test'
	environment [
		'FORCE_COLOR': 'true',
	]
	dependsOn bunInstall
	inputs.dir 'src/bun'
	inputs.dir 'src/main/resources'
  outputs.dir 'coverage'
}

test.dependsOn bunTest
