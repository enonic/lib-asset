plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.5'
    id 'com.enonic.xp.base' version '3.6.1'
    id 'com.github.node-gradle.node' version '7.1.0'
}

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = sourceCompatibility
}


dependencies {
   // compileOnly: This is used for dependencies that are only needed during
   // compilation. The library itself is not included in the final application
   // build.
  compileOnly "com.enonic.xp:core-api:${xpVersion}"
  compileOnly "com.enonic.xp:portal-api:${xpVersion}"
  compileOnly "com.enonic.xp:script-api:${xpVersion}"
  compileOnly "com.enonic.xp:admin-api:${xpVersion}"

  implementation 'com.enonic.lib:lib-router:3.1.0'

  testImplementation 'org.mockito:mockito-core:5.16.1'
  testImplementation 'org.mockito:mockito-junit-jupiter:5.16.1'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.11.4'
  testImplementation "com.enonic.xp:testing:${xpVersion}"
  testImplementation "com.enonic.xp:admin-api:${xpVersion}"
}

processResources {
  exclude '**/.gitkeep'
  exclude '**/*.ts'
  exclude '**/tsconfig.json'
}

repositories {
    mavenCentral()
    xp.enonicRepo('dev')
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }
}

check.dependsOn jacocoTestReport

test {
  useJUnitPlatform()
}

node {
  // Whether to download and install a specific Node.js version or not
  // If false, it will use the globally installed Node.js
  // If true, it will download node using above parameters
  // Note that npm is bundled with Node.js
  download = true

  // Version of node to download and install (only used if download is true)
  // It will be unpacked in the workDir
  version = '20.14.0'
}

tasks.withType(Copy) {
  includeEmptyDirs = false
}

tasks.register('npmBuild', NpmTask) {
  args = [
    'run',
    '--silent',
    'build'
  ]
  dependsOn npmInstall
  dependsOn 'javadoc'
  environment = [
    'FORCE_COLOR': 'true',
    'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
    'NODE_ENV': project.hasProperty('dev') || project.hasProperty('development') ? 'development' : 'production'
  ]
  inputs.dir 'src/main/resources'
  outputs.dir 'build/resources/main'
}
jar.dependsOn npmBuild
compileTestJava.dependsOn npmBuild

tasks.register('npmCheck', NpmTask) {
	dependsOn npmInstall
	args = [
		'run',
		'check'
	]
	environment = [
		'FORCE_COLOR': 'true',
	]
}

check.dependsOn npmCheck

tasks.register('npmTest', NpmTask) {
	args = [
		'run',
		'test'
	]
	dependsOn npmInstall
	environment = [
		'FORCE_COLOR': 'true',
	]
  inputs.dir 'src/bun'
  outputs.dir 'coverage'
}
test.dependsOn npmTest

tasks.register('publishToNpm', NpmTask ) {
  onlyIf { !version.endsWith( '-SNAPSHOT' ) }
  args = ['publish']
  dependsOn npmBuild
  workingDir = file('build/types')
}

publish.dependsOn publishToNpm
